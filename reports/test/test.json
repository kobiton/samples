{
  "reportTitle": "Kobiton Test",
  "inlineAssets": false,
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2016-03-22T10:11:45.742Z",
    "end": "2016-03-22T10:13:34.942Z",
    "duration": 109200,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Run a short script with all of existing devices",
        "suites": [],
        "tests": [
          {
            "title": "should be succesfully run a short test with all of existing devices parallel",
            "fullTitle": "Run a short script with all of existing devices should be succesfully run a short test with all of existing devices parallel",
            "timedOut": false,
            "duration": 109168,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> jobs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, cap;<br>    <span class=\"hljs-keyword\">return</span> regeneratorRuntime.async(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee$</span>(<span class=\"hljs-params\">_context</span>) </span>{<br>      <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>        <span class=\"hljs-keyword\">switch</span> (_context.prev = _context.next) {<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>            jobs = [];<br>            _coreUtil.debug.log(<span class=\"hljs-string\">'durations'</span>, onlineCaps.length);<br>            _chai.assert.isAtLeast(onlineCaps.length, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'There should be atleast 1 online device'</span>);<br>            _iteratorNormalCompletion = <span class=\"hljs-literal\">true</span>;<br>            _didIteratorError = <span class=\"hljs-literal\">false</span>;<br>            _iteratorError = <span class=\"hljs-literal\">undefined</span>;<br>            _context.prev = <span class=\"hljs-number\">6</span>;<br>            <span class=\"hljs-keyword\">for</span> (_iterator = onlineCaps[<span class=\"hljs-built_in\">Symbol</span>.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = <span class=\"hljs-literal\">true</span>) {<br>              cap = _step.value;<br>              jobs.push(_test2.default.runTestShortDuration(cap));<br>            }<br>            _context.next = <span class=\"hljs-number\">14</span>;<br>            <span class=\"hljs-keyword\">break</span>;<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>            _context.prev = <span class=\"hljs-number\">10</span>;<br>            _context.t0 = _context[<span class=\"hljs-string\">'catch'</span>](<span class=\"hljs-number\">6</span>);<br>            _didIteratorError = <span class=\"hljs-literal\">true</span>;<br>            _iteratorError = _context.t0;<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>            _context.prev = <span class=\"hljs-number\">14</span>;<br>            _context.prev = <span class=\"hljs-number\">15</span>;<br>            <span class=\"hljs-keyword\">if</span> (!_iteratorNormalCompletion &amp;&amp; _iterator.return) {<br>              _iterator.return();<br>            }<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>            _context.prev = <span class=\"hljs-number\">17</span>;<br>            <span class=\"hljs-keyword\">if</span> (!_didIteratorError) {<br>              _context.next = <span class=\"hljs-number\">20</span>;<br>              <span class=\"hljs-keyword\">break</span>;<br>            }<br>            <span class=\"hljs-keyword\">throw</span> _iteratorError;<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>            <span class=\"hljs-keyword\">return</span> _context.finish(<span class=\"hljs-number\">17</span>);<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>            <span class=\"hljs-keyword\">return</span> _context.finish(<span class=\"hljs-number\">14</span>);<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>            _context.next = <span class=\"hljs-number\">24</span>;<br>            <span class=\"hljs-keyword\">return</span> regeneratorRuntime.awrap(<span class=\"hljs-built_in\">Promise</span>.all(jobs));<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>            <span class=\"hljs-keyword\">return</span> _context.stop();<br>        }<br>      }<br>    }, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">undefined</span>, [[<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">22</span>], [<span class=\"hljs-number\">15</span>,, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">21</span>]]);",
            "isRoot": false,
            "uuid": "faa4babe-0540-4f94-b3a6-9bd634f1d1bd",
            "parentUUID": "c5cbb639-4ec0-4798-8d56-412da6f696a8",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 900000,
        "file": "\\src\\durations\\test-all-devices.js",
        "uuid": "c5cbb639-4ec0-4798-8d56-412da6f696a8",
        "fullFile": "D:\\Working\\Kobiton\\04. SourceCode\\mario8x\\tests\\src\\durations\\test-all-devices.js",
        "passes": [
          {
            "title": "should be succesfully run a short test with all of existing devices parallel",
            "fullTitle": "Run a short script with all of existing devices should be succesfully run a short test with all of existing devices parallel",
            "timedOut": false,
            "duration": 109168,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> jobs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, cap;<br>    <span class=\"hljs-keyword\">return</span> regeneratorRuntime.async(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee$</span>(<span class=\"hljs-params\">_context</span>) </span>{<br>      <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>        <span class=\"hljs-keyword\">switch</span> (_context.prev = _context.next) {<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>            jobs = [];<br>            _coreUtil.debug.log(<span class=\"hljs-string\">'durations'</span>, onlineCaps.length);<br>            _chai.assert.isAtLeast(onlineCaps.length, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'There should be atleast 1 online device'</span>);<br>            _iteratorNormalCompletion = <span class=\"hljs-literal\">true</span>;<br>            _didIteratorError = <span class=\"hljs-literal\">false</span>;<br>            _iteratorError = <span class=\"hljs-literal\">undefined</span>;<br>            _context.prev = <span class=\"hljs-number\">6</span>;<br>            <span class=\"hljs-keyword\">for</span> (_iterator = onlineCaps[<span class=\"hljs-built_in\">Symbol</span>.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = <span class=\"hljs-literal\">true</span>) {<br>              cap = _step.value;<br>              jobs.push(_test2.default.runTestShortDuration(cap));<br>            }<br>            _context.next = <span class=\"hljs-number\">14</span>;<br>            <span class=\"hljs-keyword\">break</span>;<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>            _context.prev = <span class=\"hljs-number\">10</span>;<br>            _context.t0 = _context[<span class=\"hljs-string\">'catch'</span>](<span class=\"hljs-number\">6</span>);<br>            _didIteratorError = <span class=\"hljs-literal\">true</span>;<br>            _iteratorError = _context.t0;<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>            _context.prev = <span class=\"hljs-number\">14</span>;<br>            _context.prev = <span class=\"hljs-number\">15</span>;<br>            <span class=\"hljs-keyword\">if</span> (!_iteratorNormalCompletion &amp;&amp; _iterator.return) {<br>              _iterator.return();<br>            }<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>            _context.prev = <span class=\"hljs-number\">17</span>;<br>            <span class=\"hljs-keyword\">if</span> (!_didIteratorError) {<br>              _context.next = <span class=\"hljs-number\">20</span>;<br>              <span class=\"hljs-keyword\">break</span>;<br>            }<br>            <span class=\"hljs-keyword\">throw</span> _iteratorError;<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>            <span class=\"hljs-keyword\">return</span> _context.finish(<span class=\"hljs-number\">17</span>);<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>            <span class=\"hljs-keyword\">return</span> _context.finish(<span class=\"hljs-number\">14</span>);<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>            _context.next = <span class=\"hljs-number\">24</span>;<br>            <span class=\"hljs-keyword\">return</span> regeneratorRuntime.awrap(<span class=\"hljs-built_in\">Promise</span>.all(jobs));<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>            <span class=\"hljs-keyword\">return</span> _context.stop();<br>        }<br>      }<br>    }, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">undefined</span>, [[<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">22</span>], [<span class=\"hljs-number\">15</span>,, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">21</span>]]);",
            "isRoot": false,
            "uuid": "faa4babe-0540-4f94-b3a6-9bd634f1d1bd",
            "parentUUID": "c5cbb639-4ec0-4798-8d56-412da6f696a8",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 109168
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 900000,
    "uuid": "582c3a6b-d1d9-4c0e-9d8e-cc7daaf18300",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should be succesfully run a short test with all of existing devices parallel",
      "fullTitle": "Run a short script with all of existing devices should be succesfully run a short test with all of existing devices parallel",
      "timedOut": false,
      "duration": 109168,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> jobs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, cap;<br>    <span class=\"hljs-keyword\">return</span> regeneratorRuntime.async(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee$</span>(<span class=\"hljs-params\">_context</span>) </span>{<br>      <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>        <span class=\"hljs-keyword\">switch</span> (_context.prev = _context.next) {<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>            jobs = [];<br>            _coreUtil.debug.log(<span class=\"hljs-string\">'durations'</span>, onlineCaps.length);<br>            _chai.assert.isAtLeast(onlineCaps.length, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'There should be atleast 1 online device'</span>);<br>            _iteratorNormalCompletion = <span class=\"hljs-literal\">true</span>;<br>            _didIteratorError = <span class=\"hljs-literal\">false</span>;<br>            _iteratorError = <span class=\"hljs-literal\">undefined</span>;<br>            _context.prev = <span class=\"hljs-number\">6</span>;<br>            <span class=\"hljs-keyword\">for</span> (_iterator = onlineCaps[<span class=\"hljs-built_in\">Symbol</span>.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = <span class=\"hljs-literal\">true</span>) {<br>              cap = _step.value;<br>              jobs.push(_test2.default.runTestShortDuration(cap));<br>            }<br>            _context.next = <span class=\"hljs-number\">14</span>;<br>            <span class=\"hljs-keyword\">break</span>;<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>            _context.prev = <span class=\"hljs-number\">10</span>;<br>            _context.t0 = _context[<span class=\"hljs-string\">'catch'</span>](<span class=\"hljs-number\">6</span>);<br>            _didIteratorError = <span class=\"hljs-literal\">true</span>;<br>            _iteratorError = _context.t0;<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>            _context.prev = <span class=\"hljs-number\">14</span>;<br>            _context.prev = <span class=\"hljs-number\">15</span>;<br>            <span class=\"hljs-keyword\">if</span> (!_iteratorNormalCompletion &amp;&amp; _iterator.return) {<br>              _iterator.return();<br>            }<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>            _context.prev = <span class=\"hljs-number\">17</span>;<br>            <span class=\"hljs-keyword\">if</span> (!_didIteratorError) {<br>              _context.next = <span class=\"hljs-number\">20</span>;<br>              <span class=\"hljs-keyword\">break</span>;<br>            }<br>            <span class=\"hljs-keyword\">throw</span> _iteratorError;<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>            <span class=\"hljs-keyword\">return</span> _context.finish(<span class=\"hljs-number\">17</span>);<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>            <span class=\"hljs-keyword\">return</span> _context.finish(<span class=\"hljs-number\">14</span>);<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>            _context.next = <span class=\"hljs-number\">24</span>;<br>            <span class=\"hljs-keyword\">return</span> regeneratorRuntime.awrap(<span class=\"hljs-built_in\">Promise</span>.all(jobs));<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>            <span class=\"hljs-keyword\">return</span> _context.stop();<br>        }<br>      }<br>    }, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">undefined</span>, [[<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">22</span>], [<span class=\"hljs-number\">15</span>,, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">21</span>]]);",
      "isRoot": false,
      "uuid": "df158cf3-b8c1-4b4a-858d-d53a8acfe362",
      "parentUUID": "c5cbb639-4ec0-4798-8d56-412da6f696a8",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should be succesfully run a short test with all of existing devices parallel",
      "fullTitle": "Run a short script with all of existing devices should be succesfully run a short test with all of existing devices parallel",
      "timedOut": false,
      "duration": 109168,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> jobs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, cap;<br>    <span class=\"hljs-keyword\">return</span> regeneratorRuntime.async(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee$</span>(<span class=\"hljs-params\">_context</span>) </span>{<br>      <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>        <span class=\"hljs-keyword\">switch</span> (_context.prev = _context.next) {<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>            jobs = [];<br>            _coreUtil.debug.log(<span class=\"hljs-string\">'durations'</span>, onlineCaps.length);<br>            _chai.assert.isAtLeast(onlineCaps.length, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'There should be atleast 1 online device'</span>);<br>            _iteratorNormalCompletion = <span class=\"hljs-literal\">true</span>;<br>            _didIteratorError = <span class=\"hljs-literal\">false</span>;<br>            _iteratorError = <span class=\"hljs-literal\">undefined</span>;<br>            _context.prev = <span class=\"hljs-number\">6</span>;<br>            <span class=\"hljs-keyword\">for</span> (_iterator = onlineCaps[<span class=\"hljs-built_in\">Symbol</span>.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = <span class=\"hljs-literal\">true</span>) {<br>              cap = _step.value;<br>              jobs.push(_test2.default.runTestShortDuration(cap));<br>            }<br>            _context.next = <span class=\"hljs-number\">14</span>;<br>            <span class=\"hljs-keyword\">break</span>;<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>            _context.prev = <span class=\"hljs-number\">10</span>;<br>            _context.t0 = _context[<span class=\"hljs-string\">'catch'</span>](<span class=\"hljs-number\">6</span>);<br>            _didIteratorError = <span class=\"hljs-literal\">true</span>;<br>            _iteratorError = _context.t0;<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>            _context.prev = <span class=\"hljs-number\">14</span>;<br>            _context.prev = <span class=\"hljs-number\">15</span>;<br>            <span class=\"hljs-keyword\">if</span> (!_iteratorNormalCompletion &amp;&amp; _iterator.return) {<br>              _iterator.return();<br>            }<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>            _context.prev = <span class=\"hljs-number\">17</span>;<br>            <span class=\"hljs-keyword\">if</span> (!_didIteratorError) {<br>              _context.next = <span class=\"hljs-number\">20</span>;<br>              <span class=\"hljs-keyword\">break</span>;<br>            }<br>            <span class=\"hljs-keyword\">throw</span> _iteratorError;<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>            <span class=\"hljs-keyword\">return</span> _context.finish(<span class=\"hljs-number\">17</span>);<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>            <span class=\"hljs-keyword\">return</span> _context.finish(<span class=\"hljs-number\">14</span>);<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>            _context.next = <span class=\"hljs-number\">24</span>;<br>            <span class=\"hljs-keyword\">return</span> regeneratorRuntime.awrap(<span class=\"hljs-built_in\">Promise</span>.all(jobs));<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>            <span class=\"hljs-keyword\">return</span> _context.stop();<br>        }<br>      }<br>    }, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">undefined</span>, [[<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">22</span>], [<span class=\"hljs-number\">15</span>,, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">21</span>]]);",
      "isRoot": false,
      "uuid": "fd5d759d-5118-45aa-b7c9-ec4eb0e9575e",
      "parentUUID": "c5cbb639-4ec0-4798-8d56-412da6f696a8",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2016
}